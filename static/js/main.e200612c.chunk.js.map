{"version":3,"sources":["Timer/Timer.jsx","Countdown/CountdownButtons.jsx","Countdown/CountdownResults.jsx","Countdown/Countdown.jsx","index.jsx"],"names":["Timer","props","setStateTimer","setState","milliseconds","startTimer","timerId","state","active","setTimer","setTimeout","clearTimeout","resetTimer","this","min","Math","floor","sec","millisec","className","onClick","type","shape","icon","size","ghost","React","Component","CountdownButtons","block","CountdownResults","setPropsToState","setStateDisabled","propMilliseconds","value","prevProps","strokeColor","strokeWidth","percent","status","Countdown","minutes","seconds","setMinutes","target","replace","setSeconds","handleSliderChange","sliderValue","parseFloat","onChange","disabled","maxLength","defaultValue","step","max","TabPane","Tabs","ReactDOM","render","defaultActiveKey","style","margin","tab","key","document","getElementById"],"mappings":"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","file":"static/js/main.e200612c.chunk.js","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport './Timer.scss';\nimport { Button } from 'antd';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timerId = 0;\n    this.state = {\n      milliseconds: 0,\n      active: false,\n    };\n  }\n\n  setStateTimer = () => {\n    this.setState(({ milliseconds }) => {\n      return {\n        milliseconds: milliseconds + 25,\n      };\n    });\n  };\n\n  startTimer = () => {\n    const { milliseconds } = this.state;\n    let timerId;\n    const setTimer = () => {\n      const { active } = this.state;\n      timerId = setTimeout(() => {\n        setTimer();\n        this.setStateTimer();\n      }, 25);\n      if (!active || milliseconds > 3600000) {\n        clearTimeout(timerId);\n      }\n    };\n    this.setState(\n      ({ active }) => ({ active: !active }),\n      () => {\n        setTimer();\n      }\n    );\n  };\n\n  resetTimer = () => {\n    this.setState({\n      milliseconds: 0,\n      active: false,\n    });\n  };\n\n  render() {\n    const { milliseconds } = this.state;\n    const min = Math.floor(Math.floor(milliseconds / 1000) / 60);\n    const sec = Math.floor(milliseconds / 1000) - min * 60;\n    const millisec = Math.floor((milliseconds - sec * 1000 - min * 60 * 1000) / 10);\n    return (\n      <div className=\"tab-timer\">\n        <div className=\"tab-timer__timer\">\n          {`${min < 10 ? `0${min}` : min} : ${sec < 10 ? `0${sec}` : sec} : ${\n            millisec < 10 ? `0${millisec}` : millisec\n          }`}\n        </div>\n        <div className=\"tab-timer__wrap-buttons\">\n          <Button\n            className=\"tab-timer__start-button\"\n            onClick={this.startTimer}\n            type=\"primary\"\n            shape=\"round\"\n            icon=\"Запустить/Пауза\"\n            size=\"large\"\n          />\n          <Button\n            ghost\n            className=\"tab-timer__reset-button\"\n            onClick={this.resetTimer}\n            type=\"primary\"\n            shape=\"round\"\n            icon=\"Сбросить\"\n            size=\"large\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CountdownButtons.scss';\nimport { Button } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst CountdownButtons = ({ startTimer, resetTimer }) => (\n  <div className=\"tab-countdown__wrap-buttons\">\n    <Button\n      block\n      className=\"tab-countdown__start-button\"\n      onClick={startTimer}\n      type=\"primary\"\n      shape=\"round\"\n      icon=\"Запустить/Пауза\"\n      size=\"large\"\n    />\n    <Button\n      ghost\n      className=\"tab-countdown__reset-button\"\n      onClick={resetTimer}\n      type=\"primary\"\n      shape=\"round\"\n      icon=\"Сбросить\"\n      size=\"large\"\n    />\n  </div>\n);\n\nCountdownButtons.propTypes = {\n  startTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.func.isRequired,\n};\nexport default CountdownButtons;\n","import React from 'react';\nimport './CountdownResults.scss';\nimport { Progress } from 'antd';\nimport PropTypes from 'prop-types';\nimport CountdownButtons from './CountdownButtons';\n\nexport default class CountdownResults extends React.Component {\n  constructor(props) {\n    super(props);\n    const { active } = this.props;\n    this.state = {\n      milliseconds: 0,\n      active,\n      value: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { propMilliseconds, active } = this.props;\n    if (prevProps.propMilliseconds !== propMilliseconds) {\n      this.setPropsToState(propMilliseconds, active);\n    }\n  }\n\n  setPropsToState = (milliseconds, active) => {\n    this.setState({\n      milliseconds,\n      active,\n    });\n  };\n\n  setStateTimer = () => {\n    this.setState(({ milliseconds }) => {\n      return {\n        milliseconds: milliseconds - 25,\n      };\n    });\n  };\n\n  startTimer = () => {\n    const { setStateDisabled, propMilliseconds } = this.props;\n    setStateDisabled();\n    this.setState({\n      value: propMilliseconds,\n    });\n    const setTimer = () => {\n      const { active } = this.state;\n      const timerId = setTimeout(() => {\n        const { milliseconds } = this.state;\n        if (milliseconds > 0 && active) {\n          this.setStateTimer();\n          setTimer();\n        } else {\n          clearTimeout(timerId);\n          setStateDisabled();\n        }\n      }, 25);\n    };\n    this.setState(\n      ({ active }) => ({ active: !active }),\n      () => {\n        setTimer();\n      }\n    );\n  };\n\n  render() {\n    const { value, milliseconds } = this.state;\n    const { resetTimer } = this.props;\n    const min = Math.floor(Math.floor(milliseconds / 1000) / 60);\n    const sec = Math.floor(milliseconds / 1000) - min * 60;\n    return (\n      <div className=\"tab-countdown__result\">\n        <div className=\"tab-countdown__timer\">\n          {`${min < 10 ? `0${min}` : min} : ${sec < 10 ? `0${sec}` : sec}`}\n        </div>\n        <Progress\n          strokeColor=\"#00FFFF\"\n          strokeWidth={20}\n          percent={Math.floor((milliseconds * 100) / value)}\n          status=\"active\"\n        />\n        <CountdownButtons startTimer={this.startTimer} resetTimer={resetTimer} />\n      </div>\n    );\n  }\n}\n\nCountdownResults.propTypes = {\n  resetTimer: PropTypes.func.isRequired,\n  active: PropTypes.bool.isRequired,\n  propMilliseconds: PropTypes.number.isRequired,\n  setStateDisabled: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Slider } from 'antd';\nimport CountdownResults from './CountdownResults';\n\nexport default class Countdown extends React.Component {\n  state = {\n    minutes: 0,\n    seconds: 0,\n    active: false,\n  };\n\n  setMinutes = ({ target: { value } }) => {\n    this.setState({\n      minutes: value.replace(/\\D/g, ''),\n    });\n  };\n\n  setSeconds = ({ target: { value } }) => {\n    this.setState({\n      seconds: value.replace(/\\D/g, ''),\n    });\n  };\n\n  handleSliderChange = (value) => {\n    this.setState(\n      ({ seconds }) => {\n        if (seconds <= 45) {\n          return {\n            minutes: Math.floor(value / 60),\n            seconds: seconds + 15,\n          };\n        }\n        return seconds;\n      },\n      () => {\n        this.setState(({ seconds }) => {\n          if (seconds > 45) {\n            return {\n              seconds: 0,\n            };\n          }\n          return seconds;\n        });\n      }\n    );\n  };\n\n  resetTimer = () => {\n    this.setState({\n      minutes: 0,\n      seconds: 0,\n      active: false,\n    });\n  };\n\n  setStateDisabled = () => {\n    this.setState(({ active }) => ({\n      active: !active,\n    }));\n  };\n\n  render() {\n    const { minutes, seconds, active } = this.state;\n    const sliderValue = parseFloat(minutes * 60) + parseFloat(seconds);\n    return (\n      <div className=\"tab-countdown\">\n        <form>\n          <div className=\"tab-countdown_wrap-input-min\">\n            <span className=\"tab-countdown__text-label\">Введите минуты (max: 720):</span>\n            <input\n              className={`tab-countdown__input ${active ? 'tab-countdown__input-disabled' : null}`}\n              onChange={this.setMinutes}\n              disabled={active}\n              maxLength=\"3\"\n              value={minutes > 720 ? 720 : minutes}\n            />\n          </div>\n          <div className=\"tab-countdown_wrap-input-sec\">\n            <span className=\"tab-countdown__text-label\">Введите секунды (max: 59):</span>\n            <input\n              className={`tab-countdown__input ${active ? 'tab-countdown__input-disabled' : null}`}\n              onChange={this.setSeconds}\n              disabled={active}\n              maxLength=\"2\"\n              value={seconds > 59 ? 0 : seconds}\n            />\n          </div>\n        </form>\n        <div className=\"tab-countdown__slider\">\n          Шаг установки ползунка 15сек. Приятной установки таймера.\n          <Slider\n            onChange={this.handleSliderChange}\n            disabled={active}\n            defaultValue={0}\n            value={sliderValue > 3600 ? 3600 : sliderValue}\n            step={15}\n            max={3600}\n          />\n        </div>\n        <CountdownResults\n          resetTimer={this.resetTimer}\n          setStateDisabled={this.setStateDisabled}\n          active={active}\n          propMilliseconds={seconds * 1000 + minutes * 60 * 1000}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Tabs } from 'antd';\nimport Timer from './Timer/Timer';\nimport 'antd/dist/antd.css';\nimport Countdown from './Countdown/Countdown';\n\nconst { TabPane } = Tabs;\n\nfunction callback() {\n  // console.log(key);\n}\n\nReactDOM.render(\n  <Tabs\n    defaultActiveKey=\"1\"\n    type=\"card\"\n    size=\"large\"\n    onChange={callback}\n    style={{ margin: '100px 300px' }}\n  >\n    <TabPane tab=\"Timer\" key=\"1\">\n      <Timer />\n    </TabPane>\n    <TabPane tab=\"Countdown\" key=\"2\">\n      <Countdown />\n    </TabPane>\n  </Tabs>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}